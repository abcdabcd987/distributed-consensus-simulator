"""
    Sleepy Consensus Algorithms
    * Block class
        * pbhv : Hashval (string)
            the hash value of previous block (generated by hashlib)
        * txs  : Tx list (string list) 
            recorded transactions (input)
        * t    : Timestamp (int)
            timestamp, indicating its t-th round
        * nid  : NodeId (int)
            node's identifier
        * function GetHash(self) -> Hashval (string)
    * TNode class 
        we use tree to keep tract of main chain and alternative chains,
        TNode class represent node of the tree
        * block : Block class
        * hv : Hashval (string) 
            the hash value of block in this node
            (store it so as to make searching blocks easier)
        * depth : int 
            the depth from this node to root
            (namely, the height of this block)
        * and something else to organize this structure
    * BlockChain class
        implemented as a tree
    * CheckSolution(block : Block class) -> bool
        Check if H(pid, t) < D_p
    * CheckTx(tx : Tx class) -> bool 
        placeholder, simply return True now
        Check if transaction is valid
    * TxPool class
        Store transactions that will be added into block
        * FindTx(self, tx) -> 
            check if a specifix transaction is already in it
        * AddTx(self, tx) -> bool
            add a transaction into pool if 
        * RemoveTx(self, tx) 
            remove a specific transaction
        * PopOne(self) : placeholder now
            pop the transaction with highest priority
        * PopAll(self) : 
            pop out all transaction
    * OrphanBlockPool class
        Store blocks whose parent block is not in the chain currently
        * AddBlock(self)
        * PopChild(self, hv) : 
            find the node with specified pbhv, if no match, return none
"""

from typing import *
from dcsim.framework import *

class HonestNode(NodeBase):
    @property
    def id(self) -> NodeId:
        raise NotImplementedError

    def round_action(self, ctx: Context) -> None:
        raise NotImplementedError
